# -*- coding: utf-8 -*-
"""Rashi_AutoElite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJwO-wbjIourLfPWbJeyuus9cShwxRt_

# **Task-1**

Importing lib., importing files, modifying the columns names
"""

import pandas as pd
import matplotlib.pyplot as plt

actual=pd.read_csv('https://raw.githubusercontent.com/Invact-Abhay/DOE/refs/heads/main/AutoElite_Actual.csv')
actual.head()

budget=pd.read_csv('https://raw.githubusercontent.com/Invact-Abhay/DOE/refs/heads/main/AutoElite_Budget.csv')
budget.head()

budget.columns=budget.columns.str.lower().str.replace(" ","_")
budget.columns

actual.columns=actual.columns.str.lower().str.replace(" ","_")
actual.columns

"""# **Task-2**

grouping the actual quantity_sold and then finding the merging both the tables
"""

grouped_actual=actual.groupby(['month','state','region','model'])['quantity_sold'].sum().reset_index()
grouped_actual.head()

merged_table=pd.merge(budget,actual,on=['month','state','region','model'],how='left')
merged_table.head()

"""# **Task-3**

Calculating Variance
"""

merged_table['variance']=merged_table['quantity_sold']-merged_table['budgeted_quantity']
merged_table.head()

"""# **Task-4**

calculating monthly variance
"""

month_mapping={'January':1,
               'February':2,
               'March':3,
               'April':4,
               'May':5,
               'June':6,
               'July':7,
               'August':8,
               'September':9,
               'October':10,
               'November':11,
               'December':12}
merged_table['month_number']=merged_table['month'].map(month_mapping)
merged_table.head()

monthly_variance=merged_table.groupby(['month','month_number'])['variance'].sum().reset_index()
sorted_monthly_variance=monthly_variance.sort_values('month_number',ascending=True)
sorted_monthly_variance

plt.bar(x=sorted_monthly_variance['month'],height=sorted_monthly_variance['variance'])
plt.xlabel('Month')
plt.ylabel('Variance')
plt.title('Month-wise Variance')
plt.xticks(ticks=sorted_monthly_variance['month'],rotation=30)
plt.show()

"""# **Task-5**

calculating region wise variance and plotting the graph
"""

regionwise_variance=merged_table.groupby(['region'])['variance'].sum().reset_index()
regionwise_variance

plt.bar(x=regionwise_variance['region'],height=regionwise_variance['variance'])
plt.xlabel('Region')
plt.ylabel('Variance')
plt.title('Region-wise Variance')
plt.show()

"""# **Task-6**

calculating statewise variance and also constructing the graph
"""

statewise_variance=merged_table.groupby(['state'])['variance'].sum().reset_index()
statewise_variance

plt.bar(x=statewise_variance['state'],height=statewise_variance['variance'])
plt.xlabel('State')
plt.ylabel('Variance')
plt.title('State-wise Variance')
plt.xticks(ticks=statewise_variance['state'],rotation=30)
plt.show()

"""# **Task-7**  [extra]

calculate the model wise variance and custruct graph
"""

modelwise_variance=merged_table.groupby(['model'])['variance'].sum().reset_index()
modelwise_variance

plt.bar(x=modelwise_variance['model'],height=modelwise_variance['variance'])
plt.xlabel('Model')
plt.ylabel('Variance')
plt.title('Model-wise Variance')
plt.xticks(ticks=modelwise_variance['model'],rotation=0)
plt.show()